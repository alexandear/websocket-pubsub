// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWsConn is a mock of WsConn interface
type MockWsConn struct {
	ctrl     *gomock.Controller
	recorder *MockWsConnMockRecorder
}

// MockWsConnMockRecorder is the mock recorder for MockWsConn
type MockWsConnMockRecorder struct {
	mock *MockWsConn
}

// NewMockWsConn creates a new mock instance
func NewMockWsConn(ctrl *gomock.Controller) *MockWsConn {
	mock := &MockWsConn{ctrl: ctrl}
	mock.recorder = &MockWsConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWsConn) EXPECT() *MockWsConnMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockWsConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockWsConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWsConn)(nil).Close))
}

// ReadBinaryMessage mocks base method
func (m *MockWsConn) ReadBinaryMessage() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBinaryMessage")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBinaryMessage indicates an expected call of ReadBinaryMessage
func (mr *MockWsConnMockRecorder) ReadBinaryMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBinaryMessage", reflect.TypeOf((*MockWsConn)(nil).ReadBinaryMessage))
}

// WriteBinaryMessage mocks base method
func (m *MockWsConn) WriteBinaryMessage(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBinaryMessage", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBinaryMessage indicates an expected call of WriteBinaryMessage
func (mr *MockWsConnMockRecorder) WriteBinaryMessage(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBinaryMessage", reflect.TypeOf((*MockWsConn)(nil).WriteBinaryMessage), data)
}
