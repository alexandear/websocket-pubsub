// Code generated by MockGen. DO NOT EDIT.
// Source: hub.go

// Package mock is a generated GoMock package.
package mock

import (
	server "github.com/alexandear/websocket-pubsub/internal/server"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClientI is a mock of ClientI interface
type MockClientI struct {
	ctrl     *gomock.Controller
	recorder *MockClientIMockRecorder
}

// MockClientIMockRecorder is the mock recorder for MockClientI
type MockClientIMockRecorder struct {
	mock *MockClientI
}

// NewMockClientI creates a new mock instance
func NewMockClientI(ctrl *gomock.Controller) *MockClientI {
	mock := &MockClientI{ctrl: ctrl}
	mock.recorder = &MockClientIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientI) EXPECT() *MockClientIMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockClientI) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockClientIMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockClientI)(nil).ID))
}

// CloseResponse mocks base method
func (m *MockClientI) CloseResponse() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseResponse")
}

// CloseResponse indicates an expected call of CloseResponse
func (mr *MockClientIMockRecorder) CloseResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseResponse", reflect.TypeOf((*MockClientI)(nil).CloseResponse))
}

// Response mocks base method
func (m *MockClientI) Response(message server.ResponseMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Response", message)
}

// Response indicates an expected call of Response
func (mr *MockClientIMockRecorder) Response(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockClientI)(nil).Response), message)
}
